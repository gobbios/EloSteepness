// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_ds_steep_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_ds_steep");
    reader.add_event(142, 140, "end", "model_ds_steep");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
props2nds(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& props,
              const int& n_ids, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        validate_non_negative_index("propmat", "n_ids", n_ids);
        validate_non_negative_index("propmat", "n_ids", n_ids);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> propmat(n_ids, n_ids);
        stan::math::initialize(propmat, DUMMY_VAR__);
        stan::math::fill(propmat, DUMMY_VAR__);
        current_statement_begin__ = 4;
        int cnt(0);
        (void) cnt;  // dummy to suppress unused var warning
        stan::math::fill(cnt, std::numeric_limits<int>::min());
        current_statement_begin__ = 5;
        validate_non_negative_index("w", "n_ids", n_ids);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> w(n_ids);
        stan::math::initialize(w, DUMMY_VAR__);
        stan::math::fill(w, DUMMY_VAR__);
        current_statement_begin__ = 6;
        validate_non_negative_index("w2", "n_ids", n_ids);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> w2(n_ids);
        stan::math::initialize(w2, DUMMY_VAR__);
        stan::math::fill(w2, DUMMY_VAR__);
        current_statement_begin__ = 7;
        validate_non_negative_index("l", "n_ids", n_ids);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> l(n_ids);
        stan::math::initialize(l, DUMMY_VAR__);
        stan::math::fill(l, DUMMY_VAR__);
        current_statement_begin__ = 8;
        validate_non_negative_index("l2", "n_ids", n_ids);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> l2(n_ids);
        stan::math::initialize(l2, DUMMY_VAR__);
        stan::math::fill(l2, DUMMY_VAR__);
        current_statement_begin__ = 9;
        validate_non_negative_index("ds", "n_ids", n_ids);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ds(n_ids);
        stan::math::initialize(ds, DUMMY_VAR__);
        stan::math::fill(ds, DUMMY_VAR__);
        current_statement_begin__ = 10;
        validate_non_negative_index("nds", "n_ids", n_ids);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> nds(n_ids);
        stan::math::initialize(nds, DUMMY_VAR__);
        stan::math::fill(nds, DUMMY_VAR__);
        current_statement_begin__ = 12;
        stan::math::assign(cnt, 1);
        current_statement_begin__ = 13;
        stan::model::assign(propmat, 
                    stan::model::cons_list(stan::model::index_uni(n_ids), stan::model::cons_list(stan::model::index_uni(n_ids), stan::model::nil_index_list())), 
                    0.0, 
                    "assigning variable propmat");
        current_statement_begin__ = 14;
        for (int i = 1; i <= (n_ids - 1); ++i) {
            current_statement_begin__ = 15;
            stan::model::assign(propmat, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                        0.0, 
                        "assigning variable propmat");
            current_statement_begin__ = 16;
            for (int j = 1; j <= i; ++j) {
                current_statement_begin__ = 17;
                stan::model::assign(propmat, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::nil_index_list())), 
                            inv_logit(get_base1(props, cnt, "props", 1)), 
                            "assigning variable propmat");
                current_statement_begin__ = 18;
                stan::model::assign(propmat, 
                            stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            (1.0 - inv_logit(get_base1(props, cnt, "props", 1))), 
                            "assigning variable propmat");
                current_statement_begin__ = 19;
                stan::math::assign(cnt, (cnt + 1));
            }
        }
        current_statement_begin__ = 23;
        for (int i = 1; i <= n_ids; ++i) {
            current_statement_begin__ = 24;
            stan::model::assign(w, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        sum(stan::model::rvalue(propmat, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "propmat")), 
                        "assigning variable w");
            current_statement_begin__ = 25;
            stan::model::assign(w2, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        0.0, 
                        "assigning variable w2");
            current_statement_begin__ = 26;
            stan::model::assign(l, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        sum(stan::model::rvalue(propmat, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "propmat")), 
                        "assigning variable l");
            current_statement_begin__ = 27;
            stan::model::assign(l2, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        0.0, 
                        "assigning variable l2");
        }
        current_statement_begin__ = 30;
        for (int i = 1; i <= n_ids; ++i) {
            current_statement_begin__ = 31;
            for (int j = 1; j <= n_ids; ++j) {
                current_statement_begin__ = 32;
                stan::model::assign(w2, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(w2, i, "w2", 1) + (get_base1(w, j, "w", 1) * get_base1(propmat, i, j, "propmat", 1))), 
                            "assigning variable w2");
                current_statement_begin__ = 33;
                stan::model::assign(l2, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(l2, i, "l2", 1) + (get_base1(l, j, "l", 1) * get_base1(propmat, j, i, "propmat", 1))), 
                            "assigning variable l2");
            }
        }
        current_statement_begin__ = 37;
        for (int i = 1; i <= n_ids; ++i) {
            current_statement_begin__ = 38;
            stan::model::assign(ds, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (((get_base1(w, i, "w", 1) + get_base1(w2, i, "w2", 1)) - get_base1(l, i, "l", 1)) - get_base1(l2, i, "l2", 1)), 
                        "assigning variable ds");
            current_statement_begin__ = 39;
            stan::model::assign(nds, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        ((get_base1(ds, i, "ds", 1) + ((n_ids * (n_ids - 1.0)) / 2.0)) / n_ids), 
                        "assigning variable nds");
        }
        current_statement_begin__ = 42;
        return stan::math::promote_scalar<fun_return_scalar_t__>(nds);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct props2nds_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& props,
              const int& n_ids, std::ostream* pstream__) const {
        return props2nds(props, n_ids, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
nds2steep(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& nds,
              const int& n_ids, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 47;
        validate_non_negative_index("A1", "n_ids", n_ids);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> A1(n_ids);
        stan::math::initialize(A1, DUMMY_VAR__);
        stan::math::fill(A1, DUMMY_VAR__);
        current_statement_begin__ = 48;
        validate_non_negative_index("A2", "n_ids", n_ids);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> A2(n_ids);
        stan::math::initialize(A2, DUMMY_VAR__);
        stan::math::fill(A2, DUMMY_VAR__);
        current_statement_begin__ = 49;
        validate_non_negative_index("B1", "n_ids", n_ids);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B1(n_ids);
        stan::math::initialize(B1, DUMMY_VAR__);
        stan::math::fill(B1, DUMMY_VAR__);
        current_statement_begin__ = 50;
        validate_non_negative_index("AB1", "n_ids", n_ids);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> AB1(n_ids);
        stan::math::initialize(AB1, DUMMY_VAR__);
        stan::math::fill(AB1, DUMMY_VAR__);
        current_statement_begin__ = 52;
        local_scalar_t__ sum_y(DUMMY_VAR__);
        (void) sum_y;  // dummy to suppress unused var warning
        stan::math::initialize(sum_y, DUMMY_VAR__);
        stan::math::fill(sum_y, DUMMY_VAR__);
        current_statement_begin__ = 53;
        local_scalar_t__ sum_x2(DUMMY_VAR__);
        (void) sum_x2;  // dummy to suppress unused var warning
        stan::math::initialize(sum_x2, DUMMY_VAR__);
        stan::math::fill(sum_x2, DUMMY_VAR__);
        current_statement_begin__ = 54;
        local_scalar_t__ sum_x(DUMMY_VAR__);
        (void) sum_x;  // dummy to suppress unused var warning
        stan::math::initialize(sum_x, DUMMY_VAR__);
        stan::math::fill(sum_x, DUMMY_VAR__);
        current_statement_begin__ = 55;
        local_scalar_t__ sum_xy(DUMMY_VAR__);
        (void) sum_xy;  // dummy to suppress unused var warning
        stan::math::initialize(sum_xy, DUMMY_VAR__);
        stan::math::fill(sum_xy, DUMMY_VAR__);
        current_statement_begin__ = 57;
        validate_non_negative_index("theranks", "n_ids", n_ids);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theranks(n_ids);
        stan::math::initialize(theranks, DUMMY_VAR__);
        stan::math::fill(theranks, DUMMY_VAR__);
        current_statement_begin__ = 58;
        int r(0);
        (void) r;  // dummy to suppress unused var warning
        stan::math::fill(r, std::numeric_limits<int>::min());
        current_statement_begin__ = 59;
        int s(0);
        (void) s;  // dummy to suppress unused var warning
        stan::math::fill(s, std::numeric_limits<int>::min());
        current_statement_begin__ = 61;
        validate_non_negative_index("xsteep", "2", 2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> xsteep(2);
        stan::math::initialize(xsteep, DUMMY_VAR__);
        stan::math::fill(xsteep, DUMMY_VAR__);
        current_statement_begin__ = 63;
        for (int i = 1; i <= n_ids; ++i) {
            current_statement_begin__ = 64;
            stan::math::assign(r, 1);
            current_statement_begin__ = 65;
            stan::math::assign(s, 1);
            current_statement_begin__ = 66;
            for (int j = 1; j <= i; ++j) {
                current_statement_begin__ = 67;
                if (as_bool(logical_lt(get_base1(nds, j, "nds", 1), get_base1(nds, i, "nds", 1)))) {
                    current_statement_begin__ = 68;
                    stan::math::assign(r, (r + 1));
                }
                current_statement_begin__ = 70;
                if (as_bool(logical_eq(get_base1(nds, j, "nds", 1), get_base1(nds, i, "nds", 1)))) {
                    current_statement_begin__ = 71;
                    stan::math::assign(s, (s + 1));
                }
            }
            current_statement_begin__ = 75;
            for (int j = (i + 1); j <= n_ids; ++j) {
                current_statement_begin__ = 76;
                if (as_bool(logical_lt(get_base1(nds, j, "nds", 1), get_base1(nds, i, "nds", 1)))) {
                    current_statement_begin__ = 77;
                    stan::math::assign(r, (r + 1));
                }
                current_statement_begin__ = 79;
                if (as_bool(logical_eq(get_base1(nds, j, "nds", 1), get_base1(nds, i, "nds", 1)))) {
                    current_statement_begin__ = 80;
                    stan::math::assign(s, (s + 1));
                }
            }
            current_statement_begin__ = 83;
            stan::model::assign(theranks, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        ((r + ((s - 1) * 0.5)) - 0.5), 
                        "assigning variable theranks");
        }
        current_statement_begin__ = 87;
        stan::math::assign(sum_y, sum(nds));
        current_statement_begin__ = 88;
        stan::math::assign(sum_x2, 0.0);
        current_statement_begin__ = 89;
        for (int i = 1; i <= n_ids; ++i) {
            current_statement_begin__ = 90;
            stan::math::assign(sum_x2, (sum_x2 + pow(get_base1(theranks, i, "theranks", 1), 2)));
        }
        current_statement_begin__ = 92;
        stan::math::assign(sum_x, sum(theranks));
        current_statement_begin__ = 93;
        stan::math::assign(sum_xy, sum(elt_multiply(nds, theranks)));
        current_statement_begin__ = 95;
        stan::model::assign(xsteep, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    (((sum_y * sum_x2) - (sum_x * sum_xy)) / ((n_ids * sum_x2) - pow(sum_x, 2))), 
                    "assigning variable xsteep");
        current_statement_begin__ = 98;
        stan::math::assign(A1, subtract(theranks, mean(theranks)));
        current_statement_begin__ = 99;
        stan::math::assign(B1, subtract(nds, mean(nds)));
        current_statement_begin__ = 100;
        stan::math::assign(AB1, elt_multiply(A1, B1));
        current_statement_begin__ = 101;
        stan::math::assign(A2, elt_multiply(A1, A1));
        current_statement_begin__ = 102;
        stan::model::assign(xsteep, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    (sum(AB1) / sum(A2)), 
                    "assigning variable xsteep");
        current_statement_begin__ = 104;
        return stan::math::promote_scalar<fun_return_scalar_t__>(xsteep);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct nds2steep_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& nds,
              const int& n_ids, std::ostream* pstream__) const {
        return nds2steep(nds, n_ids, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_ds_steep
  : public stan::model::model_base_crtp<model_ds_steep> {
private:
        int N;
        int K;
        int I;
        std::vector<int> interactions;
        std::vector<int> dyad;
public:
    model_ds_steep(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_ds_steep(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_ds_steep_namespace::model_ds_steep";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 109;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 110;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 111;
            context__.validate_dims("data initialization", "I", "int", context__.to_vec());
            I = int(0);
            vals_i__ = context__.vals_i("I");
            pos__ = 0;
            I = vals_i__[pos__++];
            current_statement_begin__ = 112;
            validate_non_negative_index("interactions", "N", N);
            context__.validate_dims("data initialization", "interactions", "int", context__.to_vec(N));
            interactions = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("interactions");
            pos__ = 0;
            size_t interactions_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < interactions_k_0_max__; ++k_0__) {
                interactions[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 113;
            validate_non_negative_index("dyad", "N", N);
            context__.validate_dims("data initialization", "dyad", "int", context__.to_vec(N));
            dyad = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("dyad");
            pos__ = 0;
            size_t dyad_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < dyad_k_0_max__; ++k_0__) {
                dyad[k_0__] = vals_i__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 117;
            validate_non_negative_index("a", "K", K);
            num_params_r__ += K;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_ds_steep() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 117;
        if (!(context__.contains_r("a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a");
        pos__ = 0U;
        validate_non_negative_index("a", "K", K);
        context__.validate_dims("parameter initialization", "a", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> a(K);
        size_t a_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
            a(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(a);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 117;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> a;
            (void) a;  // dummy to suppress unused var warning
            if (jacobian__)
                a = in__.vector_constrain(K, lp__);
            else
                a = in__.vector_constrain(K);
            // model body
            {
            current_statement_begin__ = 121;
            validate_non_negative_index("p", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p(N);
            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p, DUMMY_VAR__);
            current_statement_begin__ = 122;
            validate_non_negative_index("nds", "I", I);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> nds(I);
            stan::math::initialize(nds, DUMMY_VAR__);
            stan::math::fill(nds, DUMMY_VAR__);
            current_statement_begin__ = 124;
            lp_accum__.add(normal_log<propto__>(a, 0, 3));
            current_statement_begin__ = 126;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 127;
                stan::model::assign(p, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            inv_logit(get_base1(a, get_base1(dyad, i, "dyad", 1), "a", 1)), 
                            "assigning variable p");
            }
            current_statement_begin__ = 129;
            lp_accum__.add(binomial_log<propto__>(interactions, 1, p));
            current_statement_begin__ = 131;
            stan::math::assign(nds, props2nds(a, I, pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("a");
        names__.push_back("normds");
        names__.push_back("xsteep");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_ds_steep_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> a = in__.vector_constrain(K);
        size_t a_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
            vars__.push_back(a(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 135;
            validate_non_negative_index("normds", "I", I);
            Eigen::Matrix<double, Eigen::Dynamic, 1> normds(I);
            stan::math::initialize(normds, DUMMY_VAR__);
            stan::math::fill(normds, DUMMY_VAR__);
            current_statement_begin__ = 136;
            validate_non_negative_index("xsteep", "2", 2);
            Eigen::Matrix<double, Eigen::Dynamic, 1> xsteep(2);
            stan::math::initialize(xsteep, DUMMY_VAR__);
            stan::math::fill(xsteep, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 138;
            stan::math::assign(normds, props2nds(a, I, pstream__));
            current_statement_begin__ = 139;
            stan::math::assign(xsteep, nds2steep(normds, I, pstream__));
            // validate, write generated quantities
            current_statement_begin__ = 135;
            size_t normds_j_1_max__ = I;
            for (size_t j_1__ = 0; j_1__ < normds_j_1_max__; ++j_1__) {
                vars__.push_back(normds(j_1__));
            }
            current_statement_begin__ = 136;
            size_t xsteep_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < xsteep_j_1_max__; ++j_1__) {
                vars__.push_back(xsteep(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_ds_steep";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t a_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t normds_j_1_max__ = I;
        for (size_t j_1__ = 0; j_1__ < normds_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "normds" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t xsteep_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < xsteep_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xsteep" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t a_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t normds_j_1_max__ = I;
        for (size_t j_1__ = 0; j_1__ < normds_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "normds" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t xsteep_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < xsteep_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xsteep" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_ds_steep_namespace::model_ds_steep stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
