// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_ds_steep_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'ds_steep', line 107, column 2 to column 14)",
                                                      " (in 'ds_steep', line 120, column 2 to column 19)",
                                                      " (in 'ds_steep', line 121, column 2 to column 19)",
                                                      " (in 'ds_steep', line 123, column 2 to column 27)",
                                                      " (in 'ds_steep', line 124, column 2 to column 32)",
                                                      " (in 'ds_steep', line 110, column 9 to column 10)",
                                                      " (in 'ds_steep', line 110, column 2 to column 14)",
                                                      " (in 'ds_steep', line 111, column 9 to column 10)",
                                                      " (in 'ds_steep', line 111, column 2 to column 16)",
                                                      " (in 'ds_steep', line 112, column 2 to column 19)",
                                                      " (in 'ds_steep', line 114, column 4 to column 33)",
                                                      " (in 'ds_steep', line 113, column 17 to line 115, column 3)",
                                                      " (in 'ds_steep', line 113, column 2 to line 115, column 3)",
                                                      " (in 'ds_steep', line 116, column 2 to column 33)",
                                                      " (in 'ds_steep', line 117, column 2 to column 24)",
                                                      " (in 'ds_steep', line 100, column 2 to column 17)",
                                                      " (in 'ds_steep', line 101, column 2 to column 17)",
                                                      " (in 'ds_steep', line 102, column 2 to column 8)",
                                                      " (in 'ds_steep', line 103, column 8 to column 9)",
                                                      " (in 'ds_steep', line 103, column 2 to column 28)",
                                                      " (in 'ds_steep', line 104, column 8 to column 9)",
                                                      " (in 'ds_steep', line 104, column 2 to column 20)",
                                                      " (in 'ds_steep', line 107, column 9 to column 10)",
                                                      " (in 'ds_steep', line 120, column 9 to column 10)",
                                                      " (in 'ds_steep', line 3, column 11 to column 16)",
                                                      " (in 'ds_steep', line 3, column 18 to column 23)",
                                                      " (in 'ds_steep', line 3, column 4 to column 33)",
                                                      " (in 'ds_steep', line 4, column 4 to column 12)",
                                                      " (in 'ds_steep', line 5, column 11 to column 16)",
                                                      " (in 'ds_steep', line 5, column 4 to column 20)",
                                                      " (in 'ds_steep', line 6, column 11 to column 16)",
                                                      " (in 'ds_steep', line 6, column 4 to column 21)",
                                                      " (in 'ds_steep', line 7, column 11 to column 16)",
                                                      " (in 'ds_steep', line 7, column 4 to column 20)",
                                                      " (in 'ds_steep', line 8, column 11 to column 16)",
                                                      " (in 'ds_steep', line 8, column 4 to column 21)",
                                                      " (in 'ds_steep', line 9, column 11 to column 16)",
                                                      " (in 'ds_steep', line 9, column 4 to column 21)",
                                                      " (in 'ds_steep', line 10, column 11 to column 16)",
                                                      " (in 'ds_steep', line 10, column 4 to column 22)",
                                                      " (in 'ds_steep', line 11, column 4 to column 12)",
                                                      " (in 'ds_steep', line 12, column 4 to column 32)",
                                                      " (in 'ds_steep', line 14, column 6 to column 26)",
                                                      " (in 'ds_steep', line 16, column 8 to column 50)",
                                                      " (in 'ds_steep', line 17, column 8 to column 56)",
                                                      " (in 'ds_steep', line 18, column 8 to column 22)",
                                                      " (in 'ds_steep', line 15, column 21 to line 19, column 7)",
                                                      " (in 'ds_steep', line 15, column 6 to line 19, column 7)",
                                                      " (in 'ds_steep', line 13, column 29 to line 20, column 5)",
                                                      " (in 'ds_steep', line 13, column 4 to line 20, column 5)",
                                                      " (in 'ds_steep', line 22, column 6 to column 31)",
                                                      " (in 'ds_steep', line 23, column 6 to column 18)",
                                                      " (in 'ds_steep', line 24, column 6 to column 31)",
                                                      " (in 'ds_steep', line 25, column 6 to column 18)",
                                                      " (in 'ds_steep', line 21, column 23 to line 26, column 5)",
                                                      " (in 'ds_steep', line 21, column 4 to line 26, column 5)",
                                                      " (in 'ds_steep', line 29, column 8 to column 45)",
                                                      " (in 'ds_steep', line 30, column 8 to column 45)",
                                                      " (in 'ds_steep', line 28, column 25 to line 31, column 7)",
                                                      " (in 'ds_steep', line 28, column 6 to line 31, column 7)",
                                                      " (in 'ds_steep', line 27, column 23 to line 32, column 5)",
                                                      " (in 'ds_steep', line 27, column 4 to line 32, column 5)",
                                                      " (in 'ds_steep', line 34, column 6 to column 42)",
                                                      " (in 'ds_steep', line 35, column 6 to column 63)",
                                                      " (in 'ds_steep', line 33, column 23 to line 36, column 5)",
                                                      " (in 'ds_steep', line 33, column 4 to line 36, column 5)",
                                                      " (in 'ds_steep', line 37, column 4 to column 15)",
                                                      " (in 'ds_steep', line 2, column 49 to line 38, column 3)",
                                                      " (in 'ds_steep', line 41, column 11 to column 16)",
                                                      " (in 'ds_steep', line 41, column 4 to column 21)",
                                                      " (in 'ds_steep', line 42, column 11 to column 16)",
                                                      " (in 'ds_steep', line 42, column 4 to column 21)",
                                                      " (in 'ds_steep', line 43, column 11 to column 16)",
                                                      " (in 'ds_steep', line 43, column 4 to column 21)",
                                                      " (in 'ds_steep', line 44, column 11 to column 16)",
                                                      " (in 'ds_steep', line 44, column 4 to column 22)",
                                                      " (in 'ds_steep', line 46, column 4 to column 15)",
                                                      " (in 'ds_steep', line 47, column 4 to column 16)",
                                                      " (in 'ds_steep', line 48, column 4 to column 15)",
                                                      " (in 'ds_steep', line 49, column 4 to column 16)",
                                                      " (in 'ds_steep', line 51, column 11 to column 16)",
                                                      " (in 'ds_steep', line 51, column 4 to column 27)",
                                                      " (in 'ds_steep', line 52, column 4 to column 10)",
                                                      " (in 'ds_steep', line 53, column 4 to column 10)",
                                                      " (in 'ds_steep', line 55, column 4 to column 21)",
                                                      " (in 'ds_steep', line 58, column 6 to column 12)",
                                                      " (in 'ds_steep', line 59, column 6 to column 12)",
                                                      " (in 'ds_steep', line 62, column 10 to column 20)",
                                                      " (in 'ds_steep', line 61, column 29 to line 63, column 9)",
                                                      " (in 'ds_steep', line 61, column 8 to line 63, column 9)",
                                                      " (in 'ds_steep', line 65, column 10 to column 20)",
                                                      " (in 'ds_steep', line 64, column 30 to line 66, column 9)",
                                                      " (in 'ds_steep', line 64, column 8 to line 66, column 9)",
                                                      " (in 'ds_steep', line 60, column 21 to line 67, column 7)",
                                                      " (in 'ds_steep', line 60, column 6 to line 67, column 7)",
                                                      " (in 'ds_steep', line 71, column 10 to column 20)",
                                                      " (in 'ds_steep', line 70, column 29 to line 72, column 9)",
                                                      " (in 'ds_steep', line 70, column 8 to line 72, column 9)",
                                                      " (in 'ds_steep', line 74, column 10 to column 20)",
                                                      " (in 'ds_steep', line 73, column 30 to line 75, column 9)",
                                                      " (in 'ds_steep', line 73, column 8 to line 75, column 9)",
                                                      " (in 'ds_steep', line 69, column 33 to line 76, column 7)",
                                                      " (in 'ds_steep', line 69, column 6 to line 76, column 7)",
                                                      " (in 'ds_steep', line 77, column 6 to column 44)",
                                                      " (in 'ds_steep', line 57, column 23 to line 78, column 5)",
                                                      " (in 'ds_steep', line 57, column 4 to line 78, column 5)",
                                                      " (in 'ds_steep', line 81, column 4 to column 21)",
                                                      " (in 'ds_steep', line 82, column 4 to column 17)",
                                                      " (in 'ds_steep', line 84, column 6 to column 40)",
                                                      " (in 'ds_steep', line 83, column 23 to line 85, column 5)",
                                                      " (in 'ds_steep', line 83, column 4 to line 85, column 5)",
                                                      " (in 'ds_steep', line 86, column 4 to column 26)",
                                                      " (in 'ds_steep', line 87, column 4 to column 34)",
                                                      " (in 'ds_steep', line 89, column 4 to column 89)",
                                                      " (in 'ds_steep', line 91, column 4 to column 35)",
                                                      " (in 'ds_steep', line 92, column 4 to column 25)",
                                                      " (in 'ds_steep', line 93, column 4 to column 19)",
                                                      " (in 'ds_steep', line 94, column 4 to column 18)",
                                                      " (in 'ds_steep', line 95, column 4 to column 35)",
                                                      " (in 'ds_steep', line 96, column 4 to column 18)",
                                                      " (in 'ds_steep', line 39, column 47 to line 97, column 3)"};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
props2nds(const T0__& props_arg__, const int& n_ids, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& props = to_ref(props_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 25;
    validate_non_negative_index("propmat", "n_ids", n_ids);
    current_statement__ = 26;
    validate_non_negative_index("propmat", "n_ids", n_ids);
    Eigen::Matrix<local_scalar_t__, -1, -1> propmat;
    propmat = Eigen::Matrix<local_scalar_t__, -1, -1>(n_ids, n_ids);
    stan::math::fill(propmat, DUMMY_VAR__);
    
    int cnt;
    cnt = std::numeric_limits<int>::min();
    
    current_statement__ = 29;
    validate_non_negative_index("w", "n_ids", n_ids);
    Eigen::Matrix<local_scalar_t__, -1, 1> w;
    w = Eigen::Matrix<local_scalar_t__, -1, 1>(n_ids);
    stan::math::fill(w, DUMMY_VAR__);
    
    current_statement__ = 31;
    validate_non_negative_index("w2", "n_ids", n_ids);
    Eigen::Matrix<local_scalar_t__, -1, 1> w2;
    w2 = Eigen::Matrix<local_scalar_t__, -1, 1>(n_ids);
    stan::math::fill(w2, DUMMY_VAR__);
    
    current_statement__ = 33;
    validate_non_negative_index("l", "n_ids", n_ids);
    Eigen::Matrix<local_scalar_t__, -1, 1> l;
    l = Eigen::Matrix<local_scalar_t__, -1, 1>(n_ids);
    stan::math::fill(l, DUMMY_VAR__);
    
    current_statement__ = 35;
    validate_non_negative_index("l2", "n_ids", n_ids);
    Eigen::Matrix<local_scalar_t__, -1, 1> l2;
    l2 = Eigen::Matrix<local_scalar_t__, -1, 1>(n_ids);
    stan::math::fill(l2, DUMMY_VAR__);
    
    current_statement__ = 37;
    validate_non_negative_index("ds", "n_ids", n_ids);
    Eigen::Matrix<local_scalar_t__, -1, 1> ds;
    ds = Eigen::Matrix<local_scalar_t__, -1, 1>(n_ids);
    stan::math::fill(ds, DUMMY_VAR__);
    
    current_statement__ = 39;
    validate_non_negative_index("nds", "n_ids", n_ids);
    Eigen::Matrix<local_scalar_t__, -1, 1> nds;
    nds = Eigen::Matrix<local_scalar_t__, -1, 1>(n_ids);
    stan::math::fill(nds, DUMMY_VAR__);
    
    current_statement__ = 41;
    cnt = 1;
    current_statement__ = 42;
    assign(propmat,
      cons_list(index_uni(n_ids),
        cons_list(index_uni(n_ids), nil_index_list())), 0.0,
      "assigning variable propmat");
    current_statement__ = 50;
    for (int i = 1; i <= (n_ids - 1); ++i) {
      current_statement__ = 43;
      assign(propmat,
        cons_list(index_uni(i), cons_list(index_uni(i), nil_index_list())),
        0.0, "assigning variable propmat");
      current_statement__ = 48;
      for (int j = 1; j <= i; ++j) {
        current_statement__ = 44;
        assign(propmat,
          cons_list(index_uni(j),
            cons_list(index_uni((i + 1)), nil_index_list())),
          inv_logit(props[(cnt - 1)]), "assigning variable propmat");
        current_statement__ = 45;
        assign(propmat,
          cons_list(index_uni((i + 1)),
            cons_list(index_uni(j), nil_index_list())),
          (1.0 - inv_logit(props[(cnt - 1)])), "assigning variable propmat");
        current_statement__ = 46;
        cnt = (cnt + 1);}}
    current_statement__ = 56;
    for (int i = 1; i <= n_ids; ++i) {
      current_statement__ = 51;
      assign(w, cons_list(index_uni(i), nil_index_list()),
        sum(
          rvalue(propmat,
            cons_list(index_uni(i),
              cons_list(index_omni(), nil_index_list())), "propmat")),
        "assigning variable w");
      current_statement__ = 52;
      assign(w2, cons_list(index_uni(i), nil_index_list()), 0.0,
        "assigning variable w2");
      current_statement__ = 53;
      assign(l, cons_list(index_uni(i), nil_index_list()),
        sum(
          rvalue(propmat,
            cons_list(index_omni(),
              cons_list(index_uni(i), nil_index_list())), "propmat")),
        "assigning variable l");
      current_statement__ = 54;
      assign(l2, cons_list(index_uni(i), nil_index_list()), 0.0,
        "assigning variable l2");}
    current_statement__ = 62;
    for (int i = 1; i <= n_ids; ++i) {
      current_statement__ = 60;
      for (int j = 1; j <= n_ids; ++j) {
        current_statement__ = 57;
        assign(w2, cons_list(index_uni(i), nil_index_list()),
          (w2[(i - 1)] +
            (w[(j - 1)] *
              rvalue(propmat,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())), "propmat"))),
          "assigning variable w2");
        current_statement__ = 58;
        assign(l2, cons_list(index_uni(i), nil_index_list()),
          (l2[(i - 1)] +
            (l[(j - 1)] *
              rvalue(propmat,
                cons_list(index_uni(j),
                  cons_list(index_uni(i), nil_index_list())), "propmat"))),
          "assigning variable l2");}}
    current_statement__ = 66;
    for (int i = 1; i <= n_ids; ++i) {
      current_statement__ = 63;
      assign(ds, cons_list(index_uni(i), nil_index_list()),
        (((w[(i - 1)] + w2[(i - 1)]) - l[(i - 1)]) - l2[(i - 1)]),
        "assigning variable ds");
      current_statement__ = 64;
      assign(nds, cons_list(index_uni(i), nil_index_list()),
        ((ds[(i - 1)] + ((n_ids * (n_ids - 1.0)) / 2.0)) / n_ids),
        "assigning variable nds");}
    current_statement__ = 67;
    return nds;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct props2nds_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
operator()(const T0__& props, const int& n_ids, std::ostream* pstream__)  const 
{
return props2nds(props, n_ids, pstream__);
}
};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
nds2steep(const T0__& nds_arg__, const int& n_ids, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& nds = to_ref(nds_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 69;
    validate_non_negative_index("A1", "n_ids", n_ids);
    Eigen::Matrix<local_scalar_t__, -1, 1> A1;
    A1 = Eigen::Matrix<local_scalar_t__, -1, 1>(n_ids);
    stan::math::fill(A1, DUMMY_VAR__);
    
    current_statement__ = 71;
    validate_non_negative_index("A2", "n_ids", n_ids);
    Eigen::Matrix<local_scalar_t__, -1, 1> A2;
    A2 = Eigen::Matrix<local_scalar_t__, -1, 1>(n_ids);
    stan::math::fill(A2, DUMMY_VAR__);
    
    current_statement__ = 73;
    validate_non_negative_index("B1", "n_ids", n_ids);
    Eigen::Matrix<local_scalar_t__, -1, 1> B1;
    B1 = Eigen::Matrix<local_scalar_t__, -1, 1>(n_ids);
    stan::math::fill(B1, DUMMY_VAR__);
    
    current_statement__ = 75;
    validate_non_negative_index("AB1", "n_ids", n_ids);
    Eigen::Matrix<local_scalar_t__, -1, 1> AB1;
    AB1 = Eigen::Matrix<local_scalar_t__, -1, 1>(n_ids);
    stan::math::fill(AB1, DUMMY_VAR__);
    
    local_scalar_t__ sum_y;
    sum_y = DUMMY_VAR__;
    
    local_scalar_t__ sum_x2;
    sum_x2 = DUMMY_VAR__;
    
    local_scalar_t__ sum_x;
    sum_x = DUMMY_VAR__;
    
    local_scalar_t__ sum_xy;
    sum_xy = DUMMY_VAR__;
    
    current_statement__ = 81;
    validate_non_negative_index("theranks", "n_ids", n_ids);
    Eigen::Matrix<local_scalar_t__, -1, 1> theranks;
    theranks = Eigen::Matrix<local_scalar_t__, -1, 1>(n_ids);
    stan::math::fill(theranks, DUMMY_VAR__);
    
    int r;
    r = std::numeric_limits<int>::min();
    
    int s;
    s = std::numeric_limits<int>::min();
    
    Eigen::Matrix<local_scalar_t__, -1, 1> xsteep;
    xsteep = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(xsteep, DUMMY_VAR__);
    
    current_statement__ = 106;
    for (int i = 1; i <= n_ids; ++i) {
      current_statement__ = 86;
      r = 1;
      current_statement__ = 87;
      s = 1;
      current_statement__ = 95;
      for (int j = 1; j <= i; ++j) {
        current_statement__ = 90;
        if (logical_lt(nds[(j - 1)], nds[(i - 1)])) {
          current_statement__ = 88;
          r = (r + 1);
        } 
        current_statement__ = 93;
        if (logical_eq(nds[(j - 1)], nds[(i - 1)])) {
          current_statement__ = 91;
          s = (s + 1);
        } }
      current_statement__ = 103;
      for (int j = (i + 1); j <= n_ids; ++j) {
        current_statement__ = 98;
        if (logical_lt(nds[(j - 1)], nds[(i - 1)])) {
          current_statement__ = 96;
          r = (r + 1);
        } 
        current_statement__ = 101;
        if (logical_eq(nds[(j - 1)], nds[(i - 1)])) {
          current_statement__ = 99;
          s = (s + 1);
        } }
      current_statement__ = 104;
      assign(theranks, cons_list(index_uni(i), nil_index_list()),
        ((r + ((s - 1) * 0.5)) - 0.5), "assigning variable theranks");}
    current_statement__ = 107;
    sum_y = sum(nds);
    current_statement__ = 108;
    sum_x2 = 0.0;
    current_statement__ = 111;
    for (int i = 1; i <= n_ids; ++i) {
      current_statement__ = 109;
      sum_x2 = (sum_x2 + pow(theranks[(i - 1)], 2));}
    current_statement__ = 112;
    sum_x = sum(theranks);
    current_statement__ = 113;
    sum_xy = sum(elt_multiply(nds, theranks));
    current_statement__ = 114;
    assign(xsteep, cons_list(index_uni(1), nil_index_list()),
      (((sum_y * sum_x2) - (sum_x * sum_xy)) /
        ((n_ids * sum_x2) - pow(sum_x, 2))), "assigning variable xsteep");
    current_statement__ = 115;
    assign(A1, nil_index_list(), subtract(theranks, mean(theranks)),
      "assigning variable A1");
    current_statement__ = 116;
    assign(B1, nil_index_list(), subtract(nds, mean(nds)),
      "assigning variable B1");
    current_statement__ = 117;
    assign(AB1, nil_index_list(), elt_multiply(A1, B1),
      "assigning variable AB1");
    current_statement__ = 118;
    assign(A2, nil_index_list(), elt_multiply(A1, A1),
      "assigning variable A2");
    current_statement__ = 119;
    assign(xsteep, cons_list(index_uni(2), nil_index_list()),
      (sum(AB1) / sum(A2)), "assigning variable xsteep");
    current_statement__ = 120;
    return xsteep;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct nds2steep_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
operator()(const T0__& nds, const int& n_ids, std::ostream* pstream__)  const 
{
return nds2steep(nds, n_ids, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_ds_steep final : public model_base_crtp<model_ds_steep> {
private:
  int N;
  int K;
  int I;
  std::vector<int> interactions;
  std::vector<int> dyad;
 
public:
  ~model_ds_steep() { }
  
  inline std::string model_name() const final { return "model_ds_steep"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_ds_steep(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_ds_steep_namespace::model_ds_steep";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 16;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 16;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 16;
      current_statement__ = 16;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 17;
      context__.validate_dims("data initialization","K","int",
          context__.to_vec());
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 17;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 17;
      current_statement__ = 17;
      check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 18;
      context__.validate_dims("data initialization","I","int",
          context__.to_vec());
      I = std::numeric_limits<int>::min();
      
      current_statement__ = 18;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 19;
      validate_non_negative_index("interactions", "N", N);
      current_statement__ = 20;
      context__.validate_dims("data initialization","interactions","int",
          context__.to_vec(N));
      interactions = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 20;
      assign(interactions, nil_index_list(),
        context__.vals_i("interactions"), "assigning variable interactions");
      current_statement__ = 21;
      validate_non_negative_index("dyad", "N", N);
      current_statement__ = 22;
      context__.validate_dims("data initialization","dyad","int",
          context__.to_vec(N));
      dyad = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 22;
      assign(dyad, nil_index_list(), context__.vals_i("dyad"),
        "assigning variable dyad");
      current_statement__ = 23;
      validate_non_negative_index("a", "K", K);
      current_statement__ = 24;
      validate_non_negative_index("normds", "I", I);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += K;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_ds_steep_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> a;
      a = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(a, DUMMY_VAR__);
      
      current_statement__ = 1;
      a = in__.vector(K);
      {
        current_statement__ = 6;
        validate_non_negative_index("p", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> p;
        p = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(p, DUMMY_VAR__);
        
        current_statement__ = 8;
        validate_non_negative_index("nds", "I", I);
        Eigen::Matrix<local_scalar_t__, -1, 1> nds;
        nds = Eigen::Matrix<local_scalar_t__, -1, 1>(I);
        stan::math::fill(nds, DUMMY_VAR__);
        
        current_statement__ = 10;
        lp_accum__.add(normal_lpdf<propto__>(a, 0, 3));
        current_statement__ = 13;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 11;
          assign(p, cons_list(index_uni(i), nil_index_list()),
            inv_logit(a[(dyad[(i - 1)] - 1)]), "assigning variable p");}
        current_statement__ = 14;
        lp_accum__.add(binomial_lpmf<propto__>(interactions, 1, p));
        current_statement__ = 15;
        assign(nds, nil_index_list(), props2nds(a, I, pstream__),
          "assigning variable nds");
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_ds_steep_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> a;
      a = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(a, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      a = in__.vector(K);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(a[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> normds;
      normds = Eigen::Matrix<double, -1, 1>(I);
      stan::math::fill(normds, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> xsteep;
      xsteep = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(xsteep, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(normds, nil_index_list(), props2nds(a, I, pstream__),
        "assigning variable normds");
      current_statement__ = 5;
      assign(xsteep, nil_index_list(), nds2steep(normds, I, pstream__),
        "assigning variable xsteep");
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        vars__.emplace_back(normds[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(xsteep[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> a;
      a = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(a, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> a_flat__;
        current_statement__ = 1;
        assign(a_flat__, nil_index_list(), context__.vals_r("a"),
          "assigning variable a_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          assign(a, cons_list(index_uni(sym1__), nil_index_list()),
            a_flat__[(pos__ - 1)], "assigning variable a");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(a[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("a");
    names__.emplace_back("normds");
    names__.emplace_back("xsteep");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(I)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "normds" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "xsteep" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "normds" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "xsteep" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"a\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"normds\",\"type\":{\"name\":\"vector\",\"length\":" << I << "},\"block\":\"generated_quantities\"},{\"name\":\"xsteep\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"a\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"normds\",\"type\":{\"name\":\"vector\",\"length\":" << I << "},\"block\":\"generated_quantities\"},{\"name\":\"xsteep\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_ds_steep_namespace::model_ds_steep;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_ds_steep_namespace::profiles__;
}
#endif
#endif
